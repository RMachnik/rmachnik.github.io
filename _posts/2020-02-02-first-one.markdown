---
layout: post
title:  "Hi there!"
date:   2020-02-02 22:50:52 +0100
categories: blog
permalink: /blog/first
---
{% highlight java %}
public class Hello {
    public static void main(String[] args) {
        System.out.println("Hi All!")
    }
}
{% endhighlight %}
{% highlight kotlin %}
fun main() {
    println("Hi All!")
}
{% endhighlight %}
{% highlight html %}
<!DOCTYPE HTML>
<html>
<body>
  <script>
    console.log('Hi All');
  </script>
</body>
</html>
{% endhighlight %}
Do I really need to know more than 1 software language?

### YES, you do. 
#### Don't stop learning.

I remember time when in musical school starting from 4th year you were obliged to have second instrument.
For most of students it was piano. 
The reason for that was to understand wider context and [harmony](https://en.wikipedia.org/wiki/Harmony).
Not all instruments like violin, trumpet, human voice are able to emmit simultaneously multiple tones/notes.
If you look at the symphonic orchestra, there are many instruments that play together to create great experience.
Harmony is very important in music. Even POP music has harmony. How many acapella songs you've heard? 

Even during IT studies most of us started from C, C++ or Pascal. I've started from C++.
All of that was needed to understand wider spectrum of computer basics. Some of languages are better in some areas than others.
For example in C you don't have any GC, at the same time you have access directly to the memory.

However when it comes to my professional experience.
I've started writing small apps in java helping team to test software in the client's office.
Then from one position to another I still stayed with java, at the same time gaining more and more expertise over Java Virtual Machine.
During my work time I learned javascript, scala, kotlin as well. 
It doesn't mean am the expert in all of those languages and their semantic.
It means I can write and understand production code and use most of language features. 
Being an expert in java helped me a lot to understand and translate some of other language syntax into `java world`.
What is the best there is that most of those languages work with JVM, 
this is something that gives me big advantage when it comes to production maintenance.

It opened my eyes on different concepts like: 
* [function as a first class objects](http://ryanchristiani.com/functions-as-first-class-citizens-in-javascript/)
* [companion objects](https://kotlinlang.org/docs/tutorials/kotlin-for-py/objects-and-companion-objects.html)
* [extensions](https://kotlinlang.org/docs/reference/extensions.html)
* [lambda expressions](https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)
* [inheritance](https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html)
* [monad](https://medium.com/@taluyev/understanding-the-monad-in-java-ce6975706039)
* [garbage collector](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)

Surprisingly, it helped me to be thankful that java is so simple language.

After some time it gave me possibility to judge over the language flavours and suitability. 
Do I plan to learn more? Yes, but for now I am focused on getting my head around algorithms.
I do tasks from [Cracking the coding interview](http://crackingthecodinginterview.com/). 

It is all about learning, good software developer should learn not only how write high quality code.
What to learn more? That comes in next posts. 

Stay tuned.